[
  {
    "id": 1,
    "title": "Introduction to Academy",
    "maker": "Haris Pylarinos",
    "imageUrl": "/images/modules/15/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "This module is recommended for new users. It allows users to become acquainted with the platform and the learning process.",
    "prelude": "In this module, we cover the Academy as a platform and how to use it to train yourself!",
    "hoursToComplete": 1,
    "conditions": []
  },
  {
    "id": 2,
    "title": "Learning Process",
    "maker": "Cry0l1t3",
    "imageUrl": "/images/modules/9/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "The learning process is one of the essential and most important components that is often overlooked. This module does not teach you techniques to learn but describes the process of learning adapted to the field of information security. You will learn to understand how and when we learn best and increase and improve your learning efficiency greatly.",
    "prelude": "This module covers various stages of the learning process, such as:\n* Mindset\n* Learning Efficiency and learning types\n* Documentation\n* Organization\n* Focus\n* Attention\n* Dealing with Frustration\n* The principles covered in this module will benefit you greatly as you embark on, or continue, your infosec journey.",
    "hoursToComplete": 3,
    "conditions": []
  },
  {
    "id": 3,
    "title": "Linux Fundamentals",
    "maker": "Cry0l1t3",
    "imageUrl": "/images/modules/18/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "This module covers the fundamentals required to work comfortably with the Linux operating system and shell.",
    "prelude": "Linux is an indispensable tool and system in the field of cybersecurity. Many servers run on Linux and offer a wide range of possibilities for offensive security practitioners, network defenders, and systems administrators. This module covers the essentials for starting with the Linux operating system and terminal.\n\nIn this module, we will cover:\n* Linux structure\n* Using the shell\n* Navigating the Linux operating system\n* Working with files and directories\n* Linux administration \n* Service management\n* Permissions management\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. The module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts introduced in each section. You can do this in the Pwnbox provided in the interactive sections or your own virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Fundamental.` It assumes that the user has little to no prior experience with the Linux operating system but is generally comfortable navigating a graphical operating system such as Windows. \n\nThis module has no prerequisites but serves as the basis for many of the modules contained within the Academy. Completion and an in-depth understanding of this module are crucial for success as you progress through the Academy and Hack the Box platforms.",
    "hoursToComplete": 6,
    "conditions": []
  },
  {
    "id": 4,
    "title": "File Inclusion",
    "maker": "21y4d",
    "imageUrl": "/images/modules/23/logo.png",
    "tier": "Tier 0",
    "difficulty": "Medium",
    "category": "Offensive",
    "description": "File Inclusion is a common web application vulnerability, which can be easily overlooked as part of a web application's functionality.",
    "prelude": "This module introduces the fundamentals of file inclusion vulnerabilities. Web applications often present a large attack surface, and as information security professionals, it is important to understand common attacks against a variety of frameworks and server-side languages. A successful file inclusion attack may result in sensitive data exposure (such as configuration files containing credentials) or even remote code execution.\n\nIn this module, we will cover:\n* An intro to file inclusion vulnerabilities\n* Local File Inclusion (LFI)\n* Path Traversal\n* Bypassing basic LFI restrictions\n* LFI to remote code execution (RCE)\n    * RCE through PHP wrappers\n    * RCE through Remote File Inclusion (RFI)\n    * RCE through malicious file uploads\n    * RCE through log poisoning\n* Automating LFI exploitation\n* Preventing LFI exploitation\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n*  Intro to File Inclusions\n* Local File Inclusion (LFI)\n* Remote File Inclusion (RFI)\n* File Inclusion Prevention\n\n`CREST CPSA/CRT`-related Sections:\n*  All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. The module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading`, but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to further reinforce the concepts introduced in each section. You can do this in the `PwnBox` provided in the interactive sections or in your own virtual machine.\n\n---------\n\nThe module is classified as ``Medium`` and assumes a working knowledge of the Linux command line and an understanding of information security fundamentals. The module also assumes a basic understanding of web applications and web requests, and will build on this understanding to teach how Arbitrary File Upload vulnerabilities work and how to exploit them.\n\nIn addition to the above, a firm grasp of the following modules can be considered as prerequisites for the successful completion of this module:\n* Introduction to Networking\n* Linux Fundamentals\n* Web Requests",
    "hoursToComplete": 8,
    "conditions": []
  },
  {
    "id": 5,
    "title": "SQL Injection Fundamentals",
    "maker": "21y4d",
    "imageUrl": "/images/modules/33/logo.png",
    "tier": "Tier 0",
    "difficulty": "Medium",
    "category": "Offensive",
    "description": "Databases are an important part of web application infrastructure and SQL (Structured Query Language) to store, retrieve, and manipulate information stored in them. SQL injection is a code injection technique used to take advantage of coding vulnerabilities and inject SQL queries via an application to bypass authentication, retrieve data from the back-end database, or achieve code execution on the underlying server.",
    "prelude": "Database Management systems offer faster storage and retrieval of data in comparison to traditional file storage. This makes them the medium of choice for storing data such as credentials, posts, and comments used by web applications. However, improperly implemented SQL logic can be dangerous and can lead to authentication bypass, information disclosure, remote code execution, and total server compromise. \n\nApplications implement code to create SQL queries to interact with databases. These queries can incorporate user input, which may not be properly sanitized. This leads to the creation of queries that cause unintended actions other than what the developer expected. \n\nThis module aims to develop the skills necessary to identify and exploit SQL injection vulnerabilities, mainly for MySQL databases, and as an intro to all other types of SQL injections.\n\nIn this module, we will cover the following topics:\n\n* Basics of databases and their different types\n* Basics of SQL and MySQL\n* Basic statements and operators in MySQL and how to use them\n* What are SQL injections, and how can we use them\n* Use SQL injections to subvert the web application logic and bypass authentication\n* Use UNION SQL injections to dump data from different tables and databases within the DBMS\n* Use SQL injections to read files of the back-end server\n* Use SQL injections to write a web shell on the back-end server and gain remote control over it\n* How to mitigate such SQL injections and patch your code\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. The module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts introduced in each section. You can do this in the Pwnbox provided in the interactive sections or your own virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Medium` but assumes a working knowledge of the Linux command line and an understanding of information security fundamentals. \n\nA firm grasp of the following modules can be considered prerequisites for successful completion of this module:\n\n* Introduction to Networking\n* Linux Fundamentals\n* Introduction to Web Applications\n* Web Requests",
    "hoursToComplete": 8,
    "conditions": []
  },
  {
    "id": 6,
    "title": "Web Requests",
    "maker": "21y4d",
    "imageUrl": "/images/modules/35/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "This module introduces the topic of HTTP web requests and how different web applications utilize them to communicate with their backends.",
    "prelude": "This module introduces key fundamentals that must be mastered to be successful in information security. Understanding web requests is essential for understanding how web applications work, which is necessary before attempting to attack or secure any web application. This makes this module the very first step in web application penetration testing.\n\nThis module will deliver these concepts through two main tools: `cURL` and the `Browser DevTools`. These tools are among the essential tools in any web penetration tester's arsenal, and this module will start you on the path to mastering them.\n\nIn addition to the above, this module will cover:\n* An overview of the HyperText Transfer Protocol (HTTP)\n* An overview of the Hypertext Transfer Protocol Secure (HTTPS)\n* HTTP requests and responses and their headers\n* HTTP methods and response codes\n* Common HTTP methods such as GET, POST, PUT, and DELETE\n* Interacting with APIs\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. The module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts presented in each section. You can do this in the `PwnBox` provided in the interactive sections or in your virtual machine.\n\n---------\n\nThe module is classified as ``Fundamental`` and assumes a working knowledge of the Linux command line and an understanding of information security fundamentals. Though not mandatory, we recommend taking these modules before/along with this module:\n* Introduction to Networking\n* Linux Fundamentals",
    "hoursToComplete": 4,
    "conditions": []
  },
  {
    "id": 7,
    "title": "JavaScript Deobfuscation",
    "maker": "21y4d",
    "imageUrl": "/images/modules/41/logo.png",
    "tier": "Tier 0",
    "difficulty": "Easy",
    "category": "Defensive",
    "description": "This module will take you step-by-step through the fundamentals of JavaScript Deobfuscation until you can deobfuscate basic JavaScript code and understand its purpose.",
    "prelude": "Many malicious actors tend to obfuscate their code to avoid it being detected by systems or understood by other developers.\n\nThe ability to deobfuscate code is a useful technique that can be applied to various real-world scenarios. It is useful on web application assessments to determine if a developer has used `security by obscurity` to hide JavaScript code containing sensitive data. It can also be useful for defenders when, for example, attempting to deobfuscate code that was responsible for the Phishing website used in an attack.\n\nIn this module, you will learn the basics of deobfuscating and decoding JavaScript code and will have several exercises to practice what you learned.\n\nYou will learn the following topics:\n- Locating JavaScript code\n- Intro to Code Obfuscation\n- How to Deobfuscate JavaScript code\n- How to decode encoded messages\n- Basic Code Analysis\n- Sending basic HTTP requests\n\nOur final exercise in this module will open a door for many other challenges and exercises in Hack The Box!\n\n----\n\n## Requirements\n\nIt is recommended to take the [Web Requests](/course/preview/web-requests) module before this one to get a general understanding of how HTTP requests work. If you are already familiar with them, then you should be able to start this module.",
    "hoursToComplete": 4,
    "conditions": []
  },
  {
    "id": 8,
    "title": "Windows Fundamentals",
    "maker": "mrb3n",
    "imageUrl": "/images/modules/49/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "This module covers the fundamentals required to work comfortably with the Windows operating system.",
    "prelude": "Windows is heavily used across corporate environments of all sizes. We often find ourselves gaining access to a Windows host during a penetration testing engagement. It is important to understand how to navigate the file system and command line to perform effective enumeration, privilege escalation, lateral movement, and post-exploitation. Windows can also be used as our attack box during assessments. Many servers run on Windows, and most companies deploy Windows workstations to their employees due to the ease of use for individuals and centralized administration that can be leveraged using Active Directory.  This module covers the essentials for starting with the Windows operating system and command line.\n\nIn this module, we will cover:\n\n* Windows Operating system structure\n* The Windows file system\n* Permissions management\n* Windows services\n* Processes in Windows\n* Windows Task Manager\n* Interacting with the operating system\n* Windows security\n* The Microsoft Management Console (MMC)\n* Windows Subsystem for Linux (WSL)\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. \n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts introduced in each section. You can do this in the target host provided in the interactive sections or your own virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Fundamental` and assumes that the student has a basic knowledge of the Windows operating system from a casual user perspective.\n\nThis module has no prerequisites but serves as the basis for many of the modules contained within the Academy. Completion and an in-depth understanding of this module are crucial for success as you progress through the Academy and Hack the Box platforms.",
    "hoursToComplete": 6,
    "conditions": []
  },
  {
    "id": 9,
    "title": "Login Brute Forcing",
    "maker": "21y4d",
    "imageUrl": "/images/modules/57/logo.png",
    "tier": "Tier II",
    "difficulty": "Easy",
    "category": "Offensive",
    "description": "Learn how to brute force logins for various types of services and create custom wordlists based on your target.",
    "prelude": "A critical area of web enumeration is looking for users who use weak or common passwords and attempt to guess their passwords through brute force. Though brute-forcing is always a last resort, gaining access through brute force is still very common, as most users tend to use weak or common passwords.\n\nIn the `Login Brute Forcing` module, you will learn how to brute force for users who use common or weak passwords and use their credentials to log in.\n\nYou will learn the following topics:\n- Brute forcing basic HTTP authentication\n- Brute forcing website login forms\n- Creating personalized wordlists based on personal details\n- Brute-forcing service logins, like FTP, SSH, and others\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover. The module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts introduced in each section. You can do this in the Pwnbox provided in the interactive sections, Windows machines in a lab environment as directed, or your own virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Easy` but assumes a working knowledge of the Linux command line and an understanding of information security fundamentals. \n\nA firm grasp of the following modules can be considered prerequisites for successful completion of this module:\n\n* Introduction to Networking\n* Linux Fundamentals\n* Web Requests",
    "hoursToComplete": 6,
    "conditions": []
  },
  {
    "id": 10,
    "title": "Introduction to Web Applications",
    "maker": "21y4d",
    "imageUrl": "/images/modules/75/logo.png",
    "tier": "Tier 0",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "In the Introduction to Web Applications module, you will learn all of the basics of how web applications work and begin to look at them from an information security perspective.",
    "prelude": "This module is your first step in starting web application pentesting. It teaches important aspects of web applications, which will help you understand how web application pentesting works.\n\nThis module will cover the following topics:\n\n**Intro to Web Applications**\n- Intro to Web Applications\n- Web Application Architectures\n- Front-end vs. Back-end\n\n**Front-end Components**\n- HTML\n- CSS\n- JavaScript\n\n**Front-end vulnerabilities**\n- Data Exposure\n- HTML Injection\n- XSS/CSRF\n\n**Back-end Components**\n- Back-end Servers\n- Web Servers\n- Databases\n- Development Frameworks & APIs\n\n**Back-end vulnerabilities**\n- Public Vulnerabilities\n- Common Web Vulnerabilities\n\nThe following are also some of the covered topics:\n- What is a web application?\n- What are the common web application architectures?\n- What are the most common web servers, and what are the advantages of each?\n- What types of databases are there, and where is each one used?\n- Common Web Application Development Frameworks\n- What are APIs, and how are they used?\n- Public Web Application vulnerabilities\n- Intro to OWASP Top 10 for Web Applications\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts introduced in each section. You can do this in the Pwnbox provided in the interactive sections or your own virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Fundamental` but assumes a working knowledge of the Linux command line and an understanding of information security fundamentals. \n\nA firm grasp of the following modules can be considered prerequisites for successful completion of this module:\n* Web Requests",
    "hoursToComplete": 3,
    "conditions": []
  },
  {
    "id": 11,
    "title": "Intro to Assembly Language",
    "maker": "21y4d",
    "imageUrl": "/images/modules/85/logo.png",
    "tier": "Tier III",
    "difficulty": "Medium",
    "category": "General",
    "description": "This module builds the core foundation for Binary Exploitation by teaching Computer Architecture and Assembly language basics.",
    "prelude": "Binary exploitation is a core part of penetration testing, but learning it can be pretty challenging. This is mainly due to the complexity of binary files and their underlying machine code and the way binary files interact with the processor and computer memory.  \n\nLearning the basics of Computer Architecture and the Assembly Language is fundamental for understanding binary exploitation. Both can significantly enhance our understanding of how binaries work and interact with system resources.\n\nThe `Intro to Assembly Language` module builds the core foundation for all future `Binary Exploitation` modules by teaching the basics of:\n1. Computer and Processor Architecture\n2. Debugging and Disassembling\n3. `x86_64` Assembly Language\n4. Shellcoding\n\nHaving a solid understanding of these topics will make learning basic binary exploitation very straightforward and facilitate learning advanced binary exploitation.\n\nIn addition to teaching the above topics, this module will also cover:\n- How High-Level code is compiled into Low-Level machine code\n- Different types and segments of computer memory\n- CPU clock and instruction cycles\n- CISC vs. RISC architectures\n- Different types of registers and memory addresses\n- CPU address endianess\n- Intro to `nasm` and Assembly File Structure\n- Intro to Assembling and Disassembling files\n- Basics of Binary Debugging with `GDB`\n- Basic Data and Arithmetic Assembly instructions\n- Intro to Assembly loops and branching\n- Assembly flags and conditional branching\n- Intro to Linux syscalls\n- Assembly procedures and functions\n- Using `C` and `libc` functions with Assembly\n- Intro to `pwntools` for Assembly and Shellcoding\n- Writing scripts with modern tools to extract, run, and debug shellcodes\n- Modern shellcoding techniques compliant with memory protections\n- Using tools for shellcode generation and encoding\n\nWe will also be working on a project throughout the module to apply everything we learn.\n \nBy the end of the module, we will have created a complete program that takes user input, performs advanced calculations, and outputs the results to the user, using nothing but Assembly language (*, i.e., `1`'s and `0`'s*).\n\nTo know more about this module, you may also watch this talk from module author at the **HackTheBox Uni CTF 2022** titled `First Steps Into Binary Exploitation`, as it introduces the first few sections of this module and also shows how this module is benefecial for getting started in Binary Exploitation:\n<iframe width=`560` height=`315` src=`https://www.youtube.com/embed/xUjgnjwXwos` title=`YouTube video player` frameborder=`0` allow=`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture` allowfullscreen></iframe>\n\n\nThis module is broken down into sections with accompanying hands-on exercises to practice each of the tactics and techniques we cover.  \nThe module ends with a practical hands-on skills assessment to gauge your understanding of the various topic areas.\n\nAs you work through the module, you will see example commands and command output for the various topics introduced. It is worth reproducing as many of these examples as possible to reinforce further the concepts presented in each section.  You can do this in the `PwnBox` provided in the interactive sections or your virtual machine.\n\nYou can start and stop the module at any time and pick up where you left off. There is no time limit or `grading,` but you must complete all of the exercises and the skills assessment to receive the maximum number of cubes and have this module marked as complete in any paths you have chosen.\n\nThe module is classified as `Medium` and assumes a working knowledge of the Linux command line and an understanding of information security fundamentals.\n\nA firm grasp of the following modules can be considered prerequisites for successful completion of this module:\n- Learning Process\n- Linux Fundamentals",
    "hoursToComplete": 16,
    "conditions": []
  },
  {
    "id": 12,
    "title": "Penetration Testing Process",
    "maker": "Cry0l1t3",
    "imageUrl": "/images/modules/90/logo.png",
    "tier": "Tier I",
    "difficulty": "Fundamental",
    "category": "General",
    "description": "This module teaches the penetration testing process broken down into each stage and discussed in detail. We will cover many aspects of the role of a penetration tester during a penetration test, explained and illustrated with detailed examples. The module also covers pre-engagement steps like the criteria for establishing a contract with a client for a penetration testing engagement.",
    "prelude": "The module explains the entire penetration test process in detail and highlights the essential components with examples. Because a penetration test can potentially damage some systems, we must prepare ourselves and our customers. This includes creating and preparing a contract with the customer and covering what to look for and what aspects to consider. \n\nIn this module, we will cover:\n\n- The Penetration Testing Process\n- Pre-Engagement\n- Information Gathering\n- Vulnerability Assessment\n- Exploitation\n- Post-Exploitation\n- Lateral Movement\n- Proof-of-Concept\n- Post-Engagement\n- Practice\n\n---\n\n`CREST CPSA/CRT`-related Sections:\n* All sections\n\n`CREST CCT APP`-related Sections:\n* All sections\n\n---\n\nThis module is broken down into sections with accompanying examples and visuals to elaborate on the concepts present. A firm grasp of the following module can be considered a prerequisite for successful completion of this module:\n\n- [Learning Process](https://academy.hackthebox.eu/module/details/9)\n\nThis module is the starting point for the [Junior Penetration Tester Job Role Path](/paths/jobrole) and also dives into the Hack The Box Academy teaching style and philosophy.",
    "hoursToComplete": 6,
    "conditions": []
  }
]
